{
  "_args": [
    [
      {
        "raw": "tarn@^1.1.2",
        "scope": null,
        "escapedName": "tarn",
        "name": "tarn",
        "rawSpec": "^1.1.2",
        "spec": ">=1.1.2 <2.0.0",
        "type": "range"
      },
      "D:\\knexDemo\\node_modules\\knex"
    ]
  ],
  "_from": "tarn@>=1.1.2 <2.0.0",
  "_id": "tarn@1.1.2",
  "_inCache": true,
  "_location": "/tarn",
  "_nodeVersion": "4.0.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/tarn-1.1.2.tgz_1517828051065_0.3129298484418541"
  },
  "_npmUser": {
    "name": "koskimas",
    "email": "sami.koskimaki@vincit.com"
  },
  "_npmVersion": "2.14.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "tarn@^1.1.2",
    "scope": null,
    "escapedName": "tarn",
    "name": "tarn",
    "rawSpec": "^1.1.2",
    "spec": ">=1.1.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/knex"
  ],
  "_resolved": "https://registry.npmjs.org/tarn/-/tarn-1.1.2.tgz",
  "_shasum": "22e66b505ffc6c8f9d13616e82c9b19a3261d31b",
  "_shrinkwrap": null,
  "_spec": "tarn@^1.1.2",
  "_where": "D:\\knexDemo\\node_modules\\knex",
  "author": {
    "name": "Sami KoskimÃ¤ki",
    "email": "sami.koskimaki@vincit.com",
    "url": "https://github.com/koskimas"
  },
  "bugs": {
    "url": "https://github.com/vincit/tarn.js/issues"
  },
  "dependencies": {},
  "description": "Simple and robust resource pool for node.js",
  "devDependencies": {
    "bluebird": "^3.5.1",
    "expect.js": "^0.3.1",
    "mocha": "^4.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "22e66b505ffc6c8f9d13616e82c9b19a3261d31b",
    "tarball": "https://registry.npmjs.org/tarn/-/tarn-1.1.2.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "files": [
    "README.md",
    "LICENSE",
    "lib/*"
  ],
  "gitHead": "6ec3642accfbe5c4d7446285e0415feaf0b1a065",
  "homepage": "https://github.com/vincit/tarn.js#readme",
  "keywords": [
    "pool",
    "pooling",
    "throttle"
  ],
  "license": "MIT",
  "main": "lib/tarn.js",
  "maintainers": [
    {
      "name": "koskimas",
      "email": "sami.koskimaki@vincit.com"
    }
  ],
  "name": "tarn",
  "optionalDependencies": {},
  "readme": "[![Build Status](https://travis-ci.org/Vincit/tarn.js.svg?branch=master)](https://travis-ci.org/Vincit/tarn.js)\n\n## Why yet another resource pool?\n\nTarn is focused on robustness and ability to recover from errors. Tarn has timeouts for all operations\nthat can fail or timeout so that you should never end up with pool full of crap. Tarn has a comprehensive\ntest suite and we are committed to adding tests and fixing all bugs that are found.\n\nTarn will always remain simple.\n\n## Install\n\n```\nnpm install tarn\n```\n\n## Usage\n\n```js\nconst { Pool, TimeoutError } = require('tarn');\n\nconst pool = new Pool({\n\n  // function that creates a resource. You can either pass the resource\n  // to the callback or return a promise that resolves the resource\n  // (but not both).\n  create: (cb) => {\n    cb(null, new SomeResource());\n  },\n\n  // validates a connection before it is used. Return true or false\n  // from it. If false is returned, the resource is destroyed and a\n  // another one is acquired.\n  validate: (resource) {\n    return true;\n  },\n\n  // function that destroys a resource. This is always synchronous\n  // as nothing waits for the return value.\n  destroy: (someResource) => {\n    someResource.cleanup();\n  },\n\n  // minimum size\n  min: 2,\n\n  // maximum size\n  max: 10,\n\n  // acquire promises are rejected after this many milliseconds\n  // if a resource cannot be acquired\n  acquireTimeoutMillis: 30000,\n\n  // create operations are cancelled after this many milliseconds\n  // if a resource cannot be acquired\n  createTimeoutMillis: 30000,\n\n  // free resouces are destroyed after this many milliseconds\n  idleTimeoutMillis: 30000,\n\n  // how often to check for idle resources to destroy\n  reapIntervalMillis: 1000,\n\n  // long long to idle after failed create before trying again\n  createRetryIntervalMillis: 200,\n\n  // If true, when a create fails, the first pending acquire is\n  // rejected with the error. If this is false (the default) then\n  // create is retried until acquireTimeoutMillis milliseconds has\n  // passed.\n  propagateCreateError: false\n});\n\n// acquires a resource. The promise is rejected with `tarn.TimeoutError`\n// after `acquireTimeoutMillis` if a resource could not be acquired.\nconst acquire = pool.acquire();\n\n// acquire can be aborted using the abort method\nacquire.abort();\n\n// the acquire object has a promise property that gets reolved with\n// the acquired resource\ntry {\n  const resource = await acquire.promise;\n} catch (err) {\n  // if the acquire times out an error of class TimeoutError is thrown\n  if (err instanceof TimeoutError) {\n    console.log('timeout');\n  }\n}\n\n// releases the resource.\npool.release(resource);\n\n// returns the number of non-free resources\npool.numUsed()\n\n// returns the number of free resources\npool.numFree()\n\n// how many acquires are waiting for a resource to be released\npool.numPendingAcquires()\n\n// how many asynchronous create calls are running\npool.numPendingCreates()\n\n// waits for all resources to be returned to the pool and destroys them.\n// pool cannot be used after this.\nawait pool.destroy();\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/vincit/tarn.js.git"
  },
  "scripts": {
    "test": "mocha --slow 10 --timeout 5000 --reporter spec tests.js",
    "test-bail": "mocha --slow 10 --timeout 5000 --reporter spec --bail tests.js"
  },
  "version": "1.1.2"
}
